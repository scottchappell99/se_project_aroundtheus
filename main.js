!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},t=document.querySelector(".profile__add-button"),s=document.querySelector(".profile__edit-button"),r={name:document.querySelector(".profile__name"),about:document.querySelector(".profile__subtitle"),avatar:document.querySelector(".profile__avatar")},i={name:document.querySelector(".modal__name"),about:document.querySelector(".modal__subtitle")},n=document.querySelector(".profile__avatar-button"),o=document.querySelector("#modal-add"),a=document.querySelector("#modal-edit"),l=document.querySelector("#modal-avatar");class c{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this.id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._clickFunction=s,this._deleteFunction=r,this._likeToServer=i,this._cardTemplate=document.querySelector(this._cardSelector).content.firstElementChild}_handleLikeClick(){this._likeButton.classList.toggle("card__liked_active"),this._likeToServer(this.id,this.cardElement)}_handleDeleteClick(e){this._deleteFunction(this.id,e)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLikeClick())),this._deleteButton.addEventListener("click",(e=>this._handleDeleteClick(e))),this.cardImage.addEventListener("click",(()=>this._clickFunction(this._link,this._name)))}generateCard(){return this.cardElement=this._cardTemplate.cloneNode(!0),this.cardCaption=this.cardElement.querySelector(".card__caption"),this.cardImage=this.cardElement.querySelector(".card__image"),this._likeButton=this.cardElement.querySelector(".card__like"),this._deleteButton=this.cardElement.querySelector(".card__delete-button"),this.cardImage.src=this._link,this.cardImage.alt=this._name,this.cardImage.id=this.id,this.cardCaption.textContent=this._name,this._isLiked&&this._likeButton.classList.add("card__liked_active"),this._setEventListeners(),this.cardElement}}class d{constructor(e,t){this._config=e,this._formElement=t}_showInputError(e){this._errorMessageElement=this._formElement.querySelector(`#${e.id}-error`),e.classList.add(this._config.inputErrorClass),this._errorMessageElement.textContent=e.validationMessage,this._errorMessageElement.classList.add(this._config.errorClass)}_hideInputError(e){this._errorMessageElement=this._formElement.querySelector(`#${e.id}-error`),e.classList.remove(this._config.inputErrorClass),this._errorMessageElement.textContent="",this._errorMessageElement.classList.remove(this._config.errorClass)}resetValidation(){this._inputElements.forEach((e=>this._hideInputError(e))),this.disableSubmitButton()}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_checkFormValidity=()=>this._inputElements.every((e=>e.validity.valid));disableSubmitButton(){this._submitButton.classList.add(this._config.inactiveButtonClass),this._submitButton.disabled=!0}enableSubmitButton(){this._submitButton.classList.remove(this._config.inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._isFormValid=this._checkFormValidity(this._inputElements),this._isFormValid?this.enableSubmitButton():this.disableSubmitButton()}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._config.inputSelector)],this._submitButton=this._formElement.querySelector(this._config.submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class h{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._elementContainer=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e,t){"append"===t?this._elementContainer.append(e):"prepend"===t&&this._elementContainer.prepend(e)}}class u{constructor(e){this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close=()=>{this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)};_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleClickClose=e=>{e.target===this._popupElement&&this.close()};setEventListeners(){this._closeButton.addEventListener("click",this.close),this._popupElement.addEventListener("click",(e=>this._handleClickClose(e)))}}class _ extends u{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._callbackFunction=t}_getInputValues(){return this._inputValues=Array.from(this._popupForm.querySelectorAll(".modal__input")),this._data={},this._inputValues.forEach((e=>{this._data[e.name]=e.value})),this._data}setEventListeners(){super.setEventListeners(),this._popupElement.addEventListener("submit",(()=>{this._callbackFunction(this._getInputValues())}))}clearForm(){this._popupForm.reset()}}class m{constructor(e){let{name:t,about:s,avatar:r}=e;this._name=t,this._about=s,this._avatar=r}getUserInfo(){return this.presentUserInfo={name:this._name,about:this._about},this.presentUserInfo}setUserInfo(e){return e.name.textContent=this._name,e.about.textContent=this._about,e.avatar.src=this._avatar,e.avatar.alt=`${this._name}, ${this._about}`,e}changeUserInfo(e){this._name=e.name,this._about=e.about}changeAvatar(e){this._avatar=e}}const p=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}editUserInfo(e){let{name:t,about:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}changeProfilePicture(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}addLikeToCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}removeLikeFromCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`)))}getInfoFirst(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"2a802ea2-27ed-4bda-9f25-4922d40c7a86","Content-Type":"application/json"}});let E,f;p.getInfoFirst(),p.getUserInfo().then((e=>{E=new m(e),E.setUserInfo(r)})).catch((e=>console.error(e))),p.getInitialCards().then((e=>{f=new h({items:e,renderer:e=>{const t=F(e);f.addItem(t,"append")}},".pictures__list"),f.renderItems()})).catch((e=>{console.error(e)}));const b=new _("#modal-add",(function(t){$(!0,o.querySelector(e.submitButtonSelector)),p.addCard(t).then((e=>{let t=F(e);f.addItem(t,"prepend")})).catch((e=>console.error(e))).finally((()=>{$(!1,o.querySelector(e.submitButtonSelector)),b.close(),b.clearForm(),g.add.disableSubmitButton()}))})),v=new _("#modal-edit",(function(t){$(!0,a.querySelector(e.submitButtonSelector)),E.changeUserInfo(t),p.editUserInfo(t).then((()=>E.setUserInfo(r))).catch((e=>console.error(e))).finally((()=>{$(!1,a.querySelector(e.submitButtonSelector)),v.close()}))})),S=new class extends u{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._callbackFunction=t}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(()=>{this._callbackFunction()}))}}("#modal-delete",(function(){p.deleteCard(C).catch((e=>console.error(e))).finally((()=>$(!1))),L.remove(),S.close()})),k=new _("#modal-avatar",(function(t){$(!0,l.querySelector(e.submitButtonSelector)),E.changeAvatar(t.avatar),p.changeProfilePicture(t).then((e=>E.setUserInfo(r))).catch((e=>console.error(e))).finally((()=>{$(!1,l.querySelector(e.submitButtonSelector)),k.close(),k.clearForm(),g.avatar.disableSubmitButton()}))})),y=new class extends u{constructor(e){super(e),this._popupImage=this._popupElement.querySelector(".modal__image"),this._popupCaption=this._popupElement.querySelector(".modal__text")}open(e,t){this._popupImage.src=e,this._popupImage.alt=t,this._popupCaption.textContent=t,super.open()}}("#modal-picture"),g={};let C,L,I;function q(e,t){y.open(e,t)}function B(e,t){S.open(),C=e,L=t.target.closest(".card")}function U(e,t){t.querySelector(".card__liked_active")?p.addLikeToCard(e).catch((e=>console.error(e))):p.removeLikeFromCard(e).catch((e=>console.error(e)))}function F(e){return new c(e,"#card-template",q,B,U).generateCard()}function $(e,t){e?(I=t.textContent,t.textContent="Saving..."):t.textContent=I}(e=>{Array.from(document.querySelectorAll(e.formSelector)).forEach((t=>{const s=new d(e,t),r=t.getAttribute("name");g[r]=s,s.enableValidation()}))})(e),t.addEventListener("click",(function(){b.open()})),s.addEventListener("click",(function(){const e=E.getUserInfo();i.name.value=e.name,i.about.value=e.about,g.edit.resetValidation(),v.open()})),n.addEventListener("click",(function(){k.open()})),b.setEventListeners(),v.setEventListeners(),k.setEventListeners(),S.setEventListeners(),y.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,