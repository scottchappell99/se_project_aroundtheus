!function(){"use strict";const e=document.querySelector(".profile__add-button"),t=document.querySelector(".profile__edit-button"),s={name:document.querySelector(".profile__name"),about:document.querySelector(".profile__subtitle"),avatar:document.querySelector(".profile__avatar")},r={name:document.querySelector(".modal__name"),about:document.querySelector(".modal__subtitle")},i=document.querySelector(".profile__avatar-button");document.querySelector("#modal-add"),document.querySelector("#modal-edit"),document.querySelector("#modal-avatar");class n{constructor(e,t,s,r,i,n){this._name=e.name,this._link=e.link,this.id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._clickFunction=s,this._deleteFunction=r,this._removeLikeFromServer=i,this._likeToServer=n,this._cardTemplate=document.querySelector(this._cardSelector).content.firstElementChild}_handleLikeClick(){this.cardElement.querySelector(".card__liked_active")?this._removeLikeFromServer(this.id,this._likeButton):this._likeToServer(this.id,this._likeButton)}_handleDeleteClick(e){this._deleteFunction(this.id,e)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLikeClick())),this._deleteButton.addEventListener("click",(e=>this._handleDeleteClick(e))),this.cardImage.addEventListener("click",(()=>this._clickFunction(this._link,this._name)))}generateCard(){return this.cardElement=this._cardTemplate.cloneNode(!0),this.cardCaption=this.cardElement.querySelector(".card__caption"),this.cardImage=this.cardElement.querySelector(".card__image"),this._likeButton=this.cardElement.querySelector(".card__like"),this._deleteButton=this.cardElement.querySelector(".card__delete-button"),this.cardImage.src=this._link,this.cardImage.alt=this._name,this.cardImage.id=this.id,this.cardCaption.textContent=this._name,this._isLiked&&this._likeButton.classList.add("card__liked_active"),this._setEventListeners(),this.cardElement}}class o{constructor(e,t){this._config=e,this._formElement=t}_showInputError(e){this._errorMessageElement=this._formElement.querySelector(`#${e.id}-error`),e.classList.add(this._config.inputErrorClass),this._errorMessageElement.textContent=e.validationMessage,this._errorMessageElement.classList.add(this._config.errorClass)}_hideInputError(e){this._errorMessageElement=this._formElement.querySelector(`#${e.id}-error`),e.classList.remove(this._config.inputErrorClass),this._errorMessageElement.textContent="",this._errorMessageElement.classList.remove(this._config.errorClass)}resetValidation(){this._inputElements.forEach((e=>this._hideInputError(e))),this.disableSubmitButton()}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_checkFormValidity=()=>this._inputElements.every((e=>e.validity.valid));disableSubmitButton(){this._submitButton.classList.add(this._config.inactiveButtonClass),this._submitButton.disabled=!0}enableSubmitButton(){this._submitButton.classList.remove(this._config.inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){this._isFormValid=this._checkFormValidity(this._inputElements),this._isFormValid?this.enableSubmitButton():this.disableSubmitButton()}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._config.inputSelector)],this._submitButton=this._formElement.querySelector(this._config.submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class a{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._elementContainer=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e,t){"append"===t?this._elementContainer.append(e):"prepend"===t&&this._elementContainer.prepend(e)}}class l{constructor(e){this._popupElement=document.querySelector(e),this._closeButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close=()=>{this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)};_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleClickClose=e=>{e.target===this._popupElement&&this.close()};setEventListeners(){this._closeButton.addEventListener("click",this.close),this._popupElement.addEventListener("click",(e=>this._handleClickClose(e)))}}class c extends l{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._callbackFunction=t,this._button=this._popupElement.querySelector(".modal__button")}_getInputValues(){return this._inputValues=Array.from(this._popupForm.querySelectorAll(".modal__input")),this._data={},this._inputValues.forEach((e=>{this._data[e.name]=e.value})),this._data}setEventListeners(){super.setEventListeners(),this._popupElement.addEventListener("submit",(()=>{this._callbackFunction(this._getInputValues())}))}clearForm(){this._popupForm.reset()}renderLoading(e,t){e?(this._buttonText=this._button.textContent,this._button.textContent=t):this._button.textContent=this._buttonText}}class d{constructor(e){let{name:t,about:s,avatar:r}=e;this._name=t,this._about=s,this._avatar=r}getUserInfo(){return this.presentUserInfo={name:this._name,about:this._about},this.presentUserInfo}setUserInfo(e){return e.name.textContent=this._name,e.about.textContent=this._about,e.avatar.src=this._avatar,e.avatar.alt=`${this._name}, ${this._about}`,e}changeUserInfo(e){this._name=e.name,this._about=e.about}changeAvatar(e){this._avatar=e}}const h=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._checkResponse)}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}editUserInfo(e){let{name:t,about:s}=e;return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})})}changeProfilePicture(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})})}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}addCard(e){let{name:t,link:s}=e;return this._request(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}addLikeToCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers})}removeLikeFromCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"2a802ea2-27ed-4bda-9f25-4922d40c7a86","Content-Type":"application/json"}});let u,_,m,p;h.getUserInfo().then((e=>{u=new d(e),u.setUserInfo(s)})).catch((e=>console.error(e))),h.getInitialCards().then((e=>{_=new a({items:e,renderer:e=>{const t=q(e);_.addItem(t,"append")}},".pictures__list"),_.renderItems()})).catch((e=>{console.error(e)}));const E=new c("#modal-add",(function(e){I((function(){return h.addCard(e).then((e=>{const t=q(e);_.addItem(t,"prepend")}))}),E),E.clearForm(),g.add.disableSubmitButton()})),v=new c("#modal-edit",(function(e){I((function(){return h.editUserInfo(e).then(u.changeUserInfo(e)).then(u.setUserInfo(s))}),v)})),b=new class extends l{constructor(e,t){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._callbackFunction=t}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(()=>{this._callbackFunction()}))}}("#modal-delete",(function(){h.deleteCard(m).then(p.remove()).catch((e=>console.error(e))).finally(b.close())})),f=new c("#modal-avatar",(function(e){I((function(){return h.changeProfilePicture(e).then(u.changeAvatar(e.avatar)).then(u.setUserInfo(s))}),f),f.clearForm(),g.avatar.disableSubmitButton()})),k=new class extends l{constructor(e){super(e),this._popupImage=this._popupElement.querySelector(".modal__image"),this._popupCaption=this._popupElement.querySelector(".modal__text")}open(e,t){this._popupImage.src=e,this._popupImage.alt=t,this._popupCaption.textContent=t,super.open()}}("#modal-picture"),g={};function S(e,t){k.open(e,t)}function L(e,t){b.open(),m=e,p=t.target.closest(".card")}function y(e,t){h.removeLikeFromCard(e).then(t.classList.remove("card__liked_active")).catch((e=>console.error(e)))}function C(e,t){h.addLikeToCard(e).then(t.classList.add("card__liked_active")).catch((e=>console.error(e)))}function q(e){return new n(e,"#card-template",S,L,y,C).generateCard()}function I(e,t){let s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"Saving...";t.renderLoading(!0,s),e().then((()=>{t.close()})).catch(console.error).finally((()=>{t.renderLoading(!1)}))}var B;B={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},Array.from(document.querySelectorAll(B.formSelector)).forEach((e=>{const t=new o(B,e),s=e.getAttribute("name");g[s]=t,t.enableValidation()})),e.addEventListener("click",(function(){E.open()})),t.addEventListener("click",(function(){const e=u.getUserInfo();r.name.value=e.name,r.about.value=e.about,g.edit.resetValidation(),v.open()})),i.addEventListener("click",(function(){f.open()})),E.setEventListeners(),v.setEventListeners(),f.setEventListeners(),b.setEventListeners(),k.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,